#ЗАДАНИЕ 1

mport time
class TrafficLight:
    __color = None
    __colors = ['red', 'yellow', 'green']

    def __init__(self):
        self.__color = self.__colors[0]

        def __init__(self, red_time: int = 7, yellow_time: int = 2, green_time: int = 5):
            self.__timing = {
                "red": red_time,
                "yellow": yellow_time,
                "green": green_time
            }

            def running(self):
                for mode, timer in itertools.cycle(self.__timing.items()):
                    self.__color = mode

                    for second in range(timer):
                        print(f"{self} [{second + 1}]")
                        time.sleep(1)

    def running(self):
        i=0
        while i<5:
            for el in TrafficLight.__colors:
                print(el)
                i+=1
                time.sleep(1)

traffic = TrafficLight()
traffic.running()

#ЗАДАНИЕ 2

class Road:
    __length = None
    __width = None
    weigth = None
    tickness = None

    def __init__(self, length, width):
        self.length = length
        self.width = width
        print('Create road_to_village object')

    def intake(self):
        self.weigth = 25
        self.tickness = 0.05
        intake = self.length * self.width * self.weigth * self.tickness / 1000
        print(f'Need {intake} ton for the building')

road_to_village = Road(10000, 5)
road_to_village.intake()

# ЗАДАНИЕ 3

class Worker:
    name: str
    surname: str
    position: str
    _income: dict

    def __init__(self, name: str, surname: str, position: str, wage: int, bonus: int):
        self.name = name
        self.surname = surname
        self.position = position
        self._income = {
            "wage": wage,
            "bonus": bonus
        }


class Position(Worker):
    def get_full_name(self):
        return f"{self.name} {self.surname}"

    def get_total_income(self):
        return sum(self._income.values())


john = Position("John", "Doe", "Developer", 2000, 800)
print(john.get_full_name(), john.get_total_income())

artur = Position("Artur", "Mia", "Developer", 1800, 800)
print(artur.get_full_name(), artur.get_total_income())

# ЗАДАНИЕ 4

class Cars:
    name: str
    speed: int
    color: str
    is_police = False

    def __init__(self, name, speed, color, is_police=False):
        self.name = name
        self.speed = speed
        self.color = color
        self.is_police = is_police

    def go(self):
        return print(f'{self.name} went')

    def stop(self):
        return print(f'{self.name} stopped')

    def turn(self, direction):
        return print(f'{self.name} turned to {direction}')

    def show_speed(self):
        return print(f'Speed = {self.speed}')


class SportCar(Cars):
    pass


class TownCar(Cars):
    def show_speed(self):
        super().show_speed()
        if self.show_speed > 60:
            print(f'{self.name} high speed')


class WorkCar(Cars):
    def show_speed(self):
        super().show_speed()
        if self.show_speed > 40:
            print(f'{self.name} high speed')


TownCar = TownCar('Benz', '80', 'black')
print(TownCar.name, TownCar.color, TownCar.speed, TownCar.is_police)
print(TownCar.go(), TownCar.turn('City'), TownCar.stop())

#ЗАДАНИЕ 5

class Stationery:
    title: str
    _message = "Запуск отрисовки."

    def draw(self):
        print(self._message)


class Pen(Stationery):
    title = 'Ручка'
    _message = f"{title} - рисует в тетрадке."


class Pencil(Stationery):
    title = 'Карандаш'
    _message = f"{title} - рисует на листке."


class Handle(Stationery):
    title = 'Маркер'
    _message = f"{title} - рисует на доске."


items = [Pen(), Pencil(), Handle()]

for item in items:
    item.draw()
